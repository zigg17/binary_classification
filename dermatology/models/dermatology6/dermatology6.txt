**Model Architecture:**

SimpleSqueezeNet(
  (features): Sequential(
    (0): Conv2d(3, 96, kernel_size=(3, 3), stride=(2, 2))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (3): FireModule(
      (squeeze): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (4): FireModule(
      (squeeze): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (6): FireModule(
      (squeeze): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (7): FireModule(
      (squeeze): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (8): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (9): FireModule(
      (squeeze): Conv2d(128, 48, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (10): FireModule(
      (squeeze): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (11): FireModule(
      (squeeze): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (12): FireModule(
      (squeeze): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      (expand3x3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Conv2d(256, 7, kernel_size=(1, 1), stride=(1, 1))
    (2): ReLU()
    (3): AdaptiveAvgPool2d(output_size=(1, 1))
  )
)

**Transformations:**

<module 'torchvision.transforms' from '/usr/local/lib/python3.10/dist-packages/torchvision/transforms/__init__.py'>

**Optimizer Details:**

SGD (
Parameter Group 0
    dampening: 0
    differentiable: False
    foreach: None
    initial_lr: 0.01
    lr: 0.01
    maximize: False
    momentum: 0
    nesterov: False
    weight_decay: 0.01
)

**Loss Function:**

CrossEntropyLoss()

**Number of Epochs:**

7

**Total Training Time:**

606.42 seconds
